import viterbi_algorithm as v
import generate_all_hidden_sequences as g
import numpy as np

def get_probs_ex1():
  # transition probabilities
  transition_probs = {'H|H':0.6,'H|M':0.3,'H|C':0.1,
                      'M|H':0.4,'M|M':0.3,'M|C':0.2,
                      'C|H':0.1,'C|M':0.4,'C|C':0.5}

  # emission probabilities (CW-Casual Wear , SW-Semi Casual Wear , AW - Apparel)
  emission_probs =   {'CW|H':0.8,'CW|M':0.19,'CW|C':0.01,
                      'SW|H':0.5,'SW|M':0.4,'SW|C':0.1,
                      'AW|H':0.01,'AW|M':0.2,'AW|C':0.79}                
  return transition_probs,emission_probs



# hidden states
states1 = ['H','M','C']

# set of observations
obs = ['AW','SW','CW'] 

# initial state probability distribution (our priors)
initial_probs1 = {'H':0.3,'M':0.3,'C':0.4}

# Generate list of sequences
sequence_length,sequences,best_sequence,sequence_scores = g.initializeSequences(states1,get_probs_ex1(),initial_probs1,obs)

print("Initial Distributions")
print(initial_probs1)

transition_probs, emission_probs = get_probs_ex1()

print("\nTransition Probabilities")
g.pretty_print_probs(transition_probs)

print("\nEmission Probabilities")
g.pretty_print_probs(emission_probs)

print("\nScores")
# Display sequence scores
for i in range(len(sequences)):
    print("Sequence:%10s,Score:%0.4f" % (sequences[i],sequence_scores[i]))

# The best sequence for the given observation (obs) and initial chances of the hidden states (initial_probs)
best_seq_n = np.argmax(sequence_scores)
print("\nBest Sequence:",sequences[best_seq_n],best_sequence)
print()
cache,l = v.viterbi(states1,get_probs_ex1(),initial_probs1,obs)

print("Path generated by viterbi algorithm by reducing computation...",cache,sep="\n")
print()
print("Finding the best hidden sequence from the path generated by viterbi algorithm...")
print(v.viterbi_backward(states1,cache,l),np.max(np.asarray(l)))
print()